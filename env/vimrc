" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2017 Sep 20
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

" plugin manager
call plug#begin()
Plug 'tpope/vim-sensible'
"Plug 'scrooloose/nerdtree'
"Plug 'mihaifm/vimpanel'
Plug 'junegunn/fzf'
Plug 'itchyny/lightline.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'airblade/vim-gitgutter'
Plug 'plasticboy/vim-markdown'
call plug#end()

let g:lightline = {
  \     'active': {
  \         'left': [['mode', 'paste' ], ['readonly', 'filename', 'modified']],
  \         'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
  \     }
  \ }

"function! StartUp()
"    if 0 == argc()
"        NERDTree /home/vanille/
"    else
"        if argv(0) == '.'
"            execute 'NERDTree' getcwd()
"        else
"            execute 'NERDTree' getcwd() . '/' . argv(0)
"        endif
"    endif
"endfunction
"let NERDTreeShowHidden=1
"set laststatus=2

"autocmd VimEnter * call StartUp()
"autocmd VimEnter * wincmd p

"if has("vms")
"  set nobackup		" do not keep a backup file, use versions instead
"else
"  set backup		" keep a backup file (restore to previous version)
"  if has('persistent_undo')
"    set undofile	" keep an undo file (undo changes after closing)
"  endif
"endif

set nobackup
set noshowmode

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab
" Remap <Capslock> to <Esc>, `^ prevents cursor from moving
"inoremap kj <Esc>`^
" Escape + SAVE
"inoremap jk <Esc>`^:w<CR>
" Display numbers
set number
set mouse=a

:command W wqa!
:command Q qa!

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

set belloff=all
