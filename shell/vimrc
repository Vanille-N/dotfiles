" Vimrc
" Vanille (Neven Villani)

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

" plugin manager
call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'scrooloose/nerdtree'
"Plug 'mihaifm/vimpanel'
Plug 'junegunn/fzf'
Plug 'itchyny/lightline.vim'
"Plug 'terryma/vim-multiple-cursors'
"Plug 'airblade/vim-gitgutter'
"Plug 'plasticboy/vim-markdown'
"Plug 'sainnhe/gruvbox-material'
Plug 'morhetz/gruvbox'
Plug 'ziglang/zig.vim'
Plug 'zah/nim.vim'
Plug 'rust-lang/rust.vim'
Plug 'whonore/Coqtail'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/vis'
Plug 'mariappan/dragvisuals.vim'
Plug 'qnighy/lalrpop.vim'
Plug 'ap/vim-css-color'
call plug#end()

set bg=dark
colorscheme gruvbox

let g:lightline = {
  \     'active': {
  \         'left': [['mode', 'paste' ], ['readonly', 'filename', 'modified']],
  \         'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
  \     }
  \ }

set nobackup
set noshowmode

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
"if has("autocmd")
"  " Put these in an autocmd group, so that we can delete them easily.
"  augroup vimrcEx
"  au!
"  " For all text files set 'textwidth' to 78 characters.
"  autocmd FileType text setlocal textwidth=78
"  augroup END
"else
  "set autoindent		" always set autoindenting on
"endif " has("autocmd")


set mouse=a

set splitbelow
set splitright

" Controls to move around splits
nnoremap <C-B> <C-W><C-J>
nnoremap <C-M> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" easy buffer closing
nnoremap <C-Q> :q<CR>
nnoremap <C-X> :x<CR>

" save
nnoremap <C-S> :w<CR>
inoremap <C-S> <ESC>:w<CR>a

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

set belloff=all
set nofoldenable    " disable folding

" Numbering mode absolute
set number

" Indent
"   enable
set breakindent
"   wrap
set breakindentopt=shift:2,min:40,sbr
"   wrap marker
set showbreak=>>

" Move lines
"   Normal mode
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
"  Insert mode
inoremap <C-j> <ESC>:m .+1<CR>==gi
inoremap <C-k> <ESC>:m .-2<CR>==gi
"   Visual mode
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv"
runtime plugin/dragvisuals.vim
vmap <expr> J DVB_Drag('down')
vmap <expr> K DVB_Drag('up')
vmap <expr> L DVB_Drag('right')
vmap <expr> H DVB_Drag('left')
vmap <expr> D DVB_Duplicate()

" Completion
" normal is <C-n>
"   filepath
imap <C-f> <C-x><C-f>
"   tags
imap <C-g> <C-x><C-]>
" create tags
command! MakeTags !ctags -R .

" Exercism
command! -nargs=* ExercismSubmitRust :! exercism submit src/lib.rs

filetype indent off
set nosmartindent
set nocindent
set autoindent " repeat previous indentation
" au BufEnter *.tex :set indentkeys=
au BufEnter *.ml,*.mli :setlocal indentkeys= "0{,0},0),0],:,0#,!^F,o,O,e,0=and,0=class,0=constraint,0=done,0=else,0=end,0=exception,0=external,0=if,0=include,0=inherit,0=initializer,0=let,0=method,0=open,0=then,0=type,0=val,0=with,0;;,0>\],0\|\],0>},0\|,0},0\],0)

au BufRead,BufNewFile *.bil setlocal filetype=bil
au BufRead,BufNewFile *.pest setlocal filetype=pest
au BufRead,BufNewFile *.toml setlocal filetype=toml
au BufRead,BufNewFile *.tmk setlocal filetype=texmake

au BufRead,BufNewFile *.fl,*.flex,*.l,*.lm setlocal filetype=lex
au BufRead,BufNewFile *.y,*.ypp,*.ym setlocal filetype=yacc

" nerdtree quit when main split is closed
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif

" toggle nerdtree on F2
map <F2> :NERDTreeToggle<CR>

" Tabs
"   width
set tabstop=4
"   </> step
set shiftwidth=4
"   insert spaces
set expandtab
" use ; for :
nnoremap ; :
" non-representable characters
set listchars=tab:»»,nbsp:_,trail:·
set list

" Bash-style autocompletion (insert unambiguous instead of cycling through
" possibilities)
set wildmenu
set wildmode=list:longest
" When searching for a file, recursively explore subdirectories
set path+=**

" line marker for recommended line width
set colorcolumn=81,101

" Damian Conway's Die Blinkënmatchen: highlight matches
nnoremap <silent> n n:call HLNext(0.1)<cr>
nnoremap <silent> N N:call HLNext(0.1)<cr>

function! HLNext (blinktime)
   let target_pat = '\c\%#'.@/
   let ring = matchadd('ErrorMsg', target_pat, 101)
   redraw
   exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
   call matchdelete(ring)
   redraw
endfunction


" Coqtail shortcuts
nnoremap <Esc>[1;3B :CoqNext<cr>
inoremap <Esc>[1;3B <Esc>:CoqNext<cr>==gi
nnoremap <Esc>[1;3A :CoqUndo<cr>
inoremap <Esc>[1;3A <Esc>:CoqUndo<cr>==gi
nnoremap <Esc>[1;3C :CoqToLine<cr>
inoremap <Esc>[1;3C <Esc>:CoqToLine<cr>==gi

hi Error guifg=#888800 guibg=NONE guisp=NONE gui=bold ctermfg=255 ctermbg=9 cterm=bold
hi Search guifg=#888800 guibg=NONE guisp=NONE gui=bold ctermfg=0 ctermbg=11 cterm=bold
